Version control
Version control is a system that records changes
to a file or set of files over time so that you can
recall specific versions later.Nearly Every Operation Is Local
● Browse the history of the project.
● Very little you can’t do if you’re offline.
● If you get on an airplane or a train and want to do a little
work, you can commit happily and upload when you get to
a network connection.Integrity
● Everything in Git is check-summed
● The mechanism that Git uses for this checksumming is
called a SHA-256 hash.
● A SHA-256 hash looks something like this:
6ac03f4650f627392bb021dfc14a605daf153104ba1c5ad4
973405d257088cdbWorkflow
Your local repository consists of three "trees" maintained by git.
■ The first one is your Working Directory which holds the actual files.
■ The second one is the Index which acts as a staging area
■ and Finally the HEAD which points to the last commit you've made.WorkflowCreate a new repository
Create a new directory,
open it
and perform a
git init
to create a new git repository.Checkout a repository
Create a working copy of a local repository
by running the command
git clone /path/to/repository
when using a remote server,
your command will be
git clone https://username@host:/path/to/repositoryPushing Changes
You can propose changes (add it to the Index) using
git add <filename>
git add *
This is the first step in the basic git workflow.
To actually commit these changes use
git commit -m "Commit message"
Now the file is committed to the HEAD,
but not in your remote repository yet.Pushing Changes
Your changes are now in the HEAD of your local working copy.
To send those changes to your remote repository, execute
git push origin master
Change master to whatever branch you want to push your changes to.
If you have not cloned an existing repository and want to connect your
repository to a remote server, you need to add it with
git remote add origin <server>
Now you are able to push your changes to the selected remote serverBranching
● Branches are used to develop features isolated from each other.
● The master branch is the "default" branch when you create a
repository.
● Use other branches for development and merge them back to the
master branch upon completion.Branching
Create a new branch named "feature_x" and switch to it using
git checkout -b feature_x
switch back to master
git checkout master
and delete the branch again
git branch -d feature_x
a branch is not available to others unless you push the branch to your
remote repository
git push origin <branch>Update & Merge
To update your local repository
git pull
to merge another branch into your active branch (e.g. master), use
git merge <another branch>
in both cases git tries to auto-merge changes.
In case of conflicts merge those conflicts manually by editing the
files.
Then, you need to mark them as merged with
git add <filename>
before merging changes, you can also preview them by using
git diff <source_branch> <target_branch>Tagging
It's recommended to create tags for software releases.
this is a known concept, which also exists in SVN.
You can create a new tag named 1.0.0 by executing
git tag 1.0.0 1b2e1d63ff
the 1b2e1d63ff stands for the first 10 characters of the commit id
you
want to reference with your tag.
You can get the commit id by looking at the logLog
in its simplest form, you can study repository history using.. git log
To see only the commits of a certain author:
git log --author=bob
To see a very compressed log where each commit is one line:
git log --pretty=oneline
Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of
tags and branches:
git log --graph --oneline --decorate --all
See only which files have changed:
git log --name-status
These are just a few. For more, see git log --helpReplace local changes
In case you did something wrong,
you can replace local changes using the command
git checkout -- <filename>
this replaces the changes in your working tree with the last content in
HEAD.
Changes already added to the index, as well as new files, will be kept.
If you instead want to drop all your local changes and commits, fetch the
latest history from the server and point your local master branch at it
git fetch origin
git reset --hard origin/masterStash
The "git stash" command can help you to (temporarily but safely) store your uncommitted local
changes - and leave you with a clean working copy.
git stash
To get list od stashed changes
git stash list
To continue working on a new feature
git stash popThanks...
